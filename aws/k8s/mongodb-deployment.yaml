apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: boring-media-co
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2  # AWS EBS
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: boring-media-co
data:
  01-init-database.js: |
    // MongoDB initialization script for Boring Media Co
    // This script will run automatically when MongoDB starts for the first time
    
    // Connect to the boringmedia database
    db = db.getSiblingDB('boringmedia');
    
    // Create collections
    db.createCollection('videos');
    db.createCollection('users');
    db.createCollection('comments');
    
    print('âœ… Created collections: videos, users, comments');
    
    // Insert initial users
    db.users.insertMany([
      {
        username: 'tomonthypond',
        name: 'Tomonthy Pond',
        email: 'tom@boringmedia.co',
        avatar: '/images/bpclogo.png',
        bio: 'Content creator sharing insights on technology, media, and digital innovation.',
        subscribers: 15420,
        totalVideos: 2,
        totalViews: 5577,
        joinDate: new Date('2023-01-01'),
        subscriptions: []
      },
      {
        username: 'jasonperez',
        name: 'Jason Perez',
        email: 'jason@boringmedia.co',
        avatar: 'https://via.placeholder.com/40/FF4081/FFFFFF?text=JP',
        bio: 'Security expert and tech enthusiast.',
        subscribers: 11200,
        totalVideos: 2,
        totalViews: 4686,
        joinDate: new Date('2023-02-15'),
        subscriptions: []
      }
    ]);
    
    print('âœ… Inserted 2 users');
    
    // Insert initial videos
    db.videos.insertMany([
      {
        title: 'Prioritize',
        description: 'Prioritize: Understanding and Mitigating Cyber Risks. Learn how to effectively prioritize and mitigate cyber risks in your organization.',
        uploader: {
          id: db.users.findOne({ username: 'tomonthypond' })._id.toString(),
          name: 'Tomonthy Pond',
          username: 'tomonthypond',
          avatar: '/images/bpclogo.png'
        },
        videoUrl: '/videos/Prioritize.mp4',
        thumbnailUrl: '/videos/Prioritize.mp4',
        duration: 342,
        category: 'Security',
        views: 3421,
        likes: 187,
        dislikes: 5,
        uploadDate: new Date('2024-01-15'),
        tags: ['security', 'risk', 'prioritize'],
        comments: []
      },
      {
        title: 'Mitigate',
        description: 'Mitigate: Advanced Threat Protection Strategies. Dive deep into advanced threat mitigation techniques.',
        uploader: {
          id: db.users.findOne({ username: 'tomonthypond' })._id.toString(),
          name: 'Tomonthy Pond',
          username: 'tomonthypond',
          avatar: '/images/bpclogo.png'
        },
        videoUrl: '/videos/Mitigate.mp4',
        thumbnailUrl: '/videos/Mitigate.mp4',
        duration: 278,
        category: 'Security',
        views: 2156,
        likes: 98,
        dislikes: 2,
        uploadDate: new Date('2024-01-08'),
        tags: ['security', 'threat', 'mitigation'],
        comments: []
      },
      {
        title: 'Risk Visualize',
        description: 'Risk Visualize: Interactive Data for Security Analytics. Discover how to visualize security risks with interactive dashboards.',
        uploader: {
          id: db.users.findOne({ username: 'jasonperez' })._id.toString(),
          name: 'Jason Perez',
          username: 'jasonperez',
          avatar: 'https://via.placeholder.com/40/FF4081/FFFFFF?text=JP'
        },
        videoUrl: '/videos/RiskVisualize.mp4',
        thumbnailUrl: '/videos/RiskVisualize.mp4',
        duration: 375,
        category: 'Security',
        views: 1897,
        likes: 134,
        dislikes: 1,
        uploadDate: new Date('2024-01-01'),
        tags: ['security', 'analytics', 'visualization'],
        comments: []
      },
      {
        title: 'Proactive',
        description: 'Proactive: Building a Resilient Security Architecture. Learn how to build proactive security systems.',
        uploader: {
          id: db.users.findOne({ username: 'jasonperez' })._id.toString(),
          name: 'Jason Perez',
          username: 'jasonperez',
          avatar: 'https://via.placeholder.com/40/FF4081/FFFFFF?text=JP'
        },
        videoUrl: '/videos/Proactive.mp4',
        thumbnailUrl: '/videos/Proactive.mp4',
        duration: 388,
        category: 'Security',
        views: 2789,
        likes: 156,
        dislikes: 3,
        uploadDate: new Date('2023-12-20'),
        tags: ['security', 'architecture', 'proactive'],
        comments: []
      }
    ]);
    
    print('âœ… Inserted 4 videos');
    
    // Create indexes
    db.videos.createIndex({ 'uploader.id': 1 });
    db.videos.createIndex({ uploadDate: -1 });
    db.videos.createIndex({ views: -1 });
    db.videos.createIndex({ category: 1 });
    db.videos.createIndex({ tags: 1 });
    db.users.createIndex({ username: 1 });
    db.users.createIndex({ 'subscriptions': 1 });
    
    print('ðŸŽ‰ MongoDB initialization complete!');
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: boring-media-co
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "password"
        - name: MONGO_INITDB_DATABASE
          value: "boringmedia"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-init
        configMap:
          name: mongodb-init
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: boring-media-co
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP

